#!/bin/bash
# Enhanced universal peer messaging script
# Usage: send-to-peer <target-session> "<message>"

show_help() {
    cat << 'EOF'
📤 Send-to-Peer - Universal Team Messaging

USAGE:
    send-to-peer <target-session> "<message>"

EXAMPLES:
    # Send message to backend team
    send-to-peer backend-team "Frontend ready for API integration"

    # Coordinate with mobile team
    send-to-peer mobile-team "Web UI changes pushed, please sync styles"

    # Update DevOps team
    send-to-peer devops-team "New deployment ready for staging review"

QUICK TIPS:
    💡 Use quotes around messages with spaces
    🔍 Check responses with: check-peer-messages.sh
    📋 See active bridges: bridge_registry.py list
    📊 Session status: bridge_registry.py status <your-session>

COORDINATION WORKFLOW:
    1. 📤 Send message to peer team
    2. 🔄 They see notification in their orchestrator pane
    3. 📥 Check their response with check-peer-messages.sh
    4. 🤝 Coordinate on shared tasks!
EOF
}

# Check arguments
if [ $# -eq 0 ] || [ "$1" = "help" ] || [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
    show_help
    exit 0
fi

if [ $# -lt 2 ]; then
    echo "❌ Error: Missing arguments"
    echo "💡 Usage: send-to-peer <target-session> \"<message>\""
    echo "🚀 Example: send-to-peer backend-team \"Ready for API review\""
    echo ""
    echo "📖 For more help: send-to-peer help"
    exit 1
fi

TARGET_SESSION="$1"
MESSAGE="$2"
CURRENT_SESSION=$(tmux display-message -p '#{session_name}' 2>/dev/null)

# Validate current session
if [ -z "$CURRENT_SESSION" ]; then
    echo "❌ Error: Not running in a tmux session"
    echo "💡 This tool must be run from within a tmux session"
    exit 1
fi

# Check if target session exists
if ! tmux has-session -t "$TARGET_SESSION" 2>/dev/null; then
    echo "⚠️  Warning: Target session '$TARGET_SESSION' not found"
    echo "🔍 Available sessions:"
    tmux list-sessions 2>/dev/null | cut -d: -f1 | sed 's/^/   /'
    echo ""
    echo "💡 Create bridge first: bridge_registry.py create $CURRENT_SESSION $TARGET_SESSION \"coordination context\""
    exit 1
fi

# Create coordination directory if needed
mkdir -p .ai-coordination/messages

# Generate message
MESSAGE_ID="${CURRENT_SESSION}-$(date +%s%N | cut -c1-13)"
TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%S.%3NZ")

# Create message file
cat > ".ai-coordination/messages/${MESSAGE_ID}.json" << EOF
{
  "from_session": "$CURRENT_SESSION",
  "to_session": "$TARGET_SESSION",
  "message": "$MESSAGE",
  "timestamp": "$TIMESTAMP",
  "message_id": "$MESSAGE_ID"
}
EOF

# Send notification to target session orchestrator
ESCAPED_MESSAGE=$(printf '%q' "$MESSAGE")
echo "📤 Sending message to $TARGET_SESSION..."

if tmux send-keys -t "${TARGET_SESSION}:0.0" "📨 New message from $CURRENT_SESSION: $ESCAPED_MESSAGE" Enter 2>/dev/null; then
    echo "✅ Message delivered to $TARGET_SESSION"
    echo "📝 Message: $MESSAGE"
    echo "🕒 Sent at: $(date)"
    echo ""
    echo "💡 Check for replies: check-peer-messages.sh"
else
    echo "⚠️  Message saved but notification failed (target session may not have orchestrator pane)"
    echo "📝 Message saved as: $MESSAGE_ID.json"
fi
